{"url":"https://api.github.com/repos/willmcgugan/rich/issues/145","repository_url":"https://api.github.com/repos/willmcgugan/rich","labels_url":"https://api.github.com/repos/willmcgugan/rich/issues/145/labels{/name}","comments_url":"https://api.github.com/repos/willmcgugan/rich/issues/145/comments","events_url":"https://api.github.com/repos/willmcgugan/rich/issues/145/events","html_url":"https://github.com/willmcgugan/rich/issues/145","id":652550732,"node_id":"MDU6SXNzdWU2NTI1NTA3MzI=","number":145,"title":"Suggestion: use stack_data for better tracebacks","user":{"login":"alexmojaki","id":3627481,"node_id":"MDQ6VXNlcjM2Mjc0ODE=","avatar_url":"https://avatars0.githubusercontent.com/u/3627481?v=4","gravatar_id":"","url":"https://api.github.com/users/alexmojaki","html_url":"https://github.com/alexmojaki","followers_url":"https://api.github.com/users/alexmojaki/followers","following_url":"https://api.github.com/users/alexmojaki/following{/other_user}","gists_url":"https://api.github.com/users/alexmojaki/gists{/gist_id}","starred_url":"https://api.github.com/users/alexmojaki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexmojaki/subscriptions","organizations_url":"https://api.github.com/users/alexmojaki/orgs","repos_url":"https://api.github.com/users/alexmojaki/repos","events_url":"https://api.github.com/users/alexmojaki/events{/privacy}","received_events_url":"https://api.github.com/users/alexmojaki/received_events","type":"User","site_admin":false},"labels":[{"id":1668492275,"node_id":"MDU6TGFiZWwxNjY4NDkyMjc1","url":"https://api.github.com/repos/willmcgugan/rich/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-07-07T19:04:15Z","updated_at":"2020-11-30T16:05:55Z","closed_at":"2020-11-30T16:05:55Z","author_association":"NONE","active_lock_reason":null,"body":"Hi! I've recently created a few libraries that are helpful for extracting information from frames and tracebacks, and I think they could be very useful to rich.\r\n\r\n- [`executing`](https://github.com/alexmojaki/executing) can identify the exact AST node being executed by a frame in many cases. It's always disappointed me that Python only points to a line in each frame in tracebacks, especially when the expression/statement at fault spans many lines. Sometimes it can be really hard to interpret. Currently [executing is used in IPython](https://github.com/ipython/ipython/pull/12150) (in master, unreleased) to highlight the node, here's what it looks like:\r\n\r\n![ipython](https://user-images.githubusercontent.com/3627481/75476425-3e6b9280-59a3-11ea-9b6c-b9e099475a45.png)\r\n\r\n- `executing` can also infer a function `__qualname__` from a code object, meaning your traceback can say `lorem/ipsum.py in MyClass.__init__ at line 123` instead of just `__init__`, which is much more informative.\r\n- [`pure_eval`](https://github.com/alexmojaki/pure_eval) can safely evaluate certain AST nodes without side effects, so that if the source for a frame contains expressions like `self.foo` and `bar[key]` their values can often be shown alongside plain variables. \r\n- [`stack_data`](https://github.com/alexmojaki/stack_data) collects data from tracebacks for the purpose of formatting and displaying them. It uses `executing` and `pure_eval` and also provides a lot of functionality of its own. [I integrated`stack_data` into IPython](https://github.com/ipython/ipython/pull/11886) which allowed removing a lot of flaky custom introspection code, fixing several bugs and making the code more maintainable.\r\n\r\nFor rich, I'm thinking you could use stack_data to:\r\n\r\n- Reduce the amount of code in the repo.\r\n- More intelligently select which lines of code to display, instead of just a fixed number lines before and after.\r\n- Display the values of local variables and other expressions for each frame in a nice table.\r\n- Highlight the node being executed.\r\n- Show the code qualname.\r\n- Handle repeated frames, especially when the user gets a `RecursionError: maximum recursion depth exceeded`. Right now it gets stuck for a while before producing a massive traceback.\r\n\r\nWhat do you think? If you want to know more I suggest looking through the stack_data README to get an idea of what it can do and how to use it.","closed_by":{"login":"willmcgugan","id":554369,"node_id":"MDQ6VXNlcjU1NDM2OQ==","avatar_url":"https://avatars3.githubusercontent.com/u/554369?v=4","gravatar_id":"","url":"https://api.github.com/users/willmcgugan","html_url":"https://github.com/willmcgugan","followers_url":"https://api.github.com/users/willmcgugan/followers","following_url":"https://api.github.com/users/willmcgugan/following{/other_user}","gists_url":"https://api.github.com/users/willmcgugan/gists{/gist_id}","starred_url":"https://api.github.com/users/willmcgugan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willmcgugan/subscriptions","organizations_url":"https://api.github.com/users/willmcgugan/orgs","repos_url":"https://api.github.com/users/willmcgugan/repos","events_url":"https://api.github.com/users/willmcgugan/events{/privacy}","received_events_url":"https://api.github.com/users/willmcgugan/received_events","type":"User","site_admin":false},"performed_via_github_app":null}