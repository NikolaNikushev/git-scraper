{"url":"https://api.github.com/repos/willmcgugan/rich/issues/108","repository_url":"https://api.github.com/repos/willmcgugan/rich","labels_url":"https://api.github.com/repos/willmcgugan/rich/issues/108/labels{/name}","comments_url":"https://api.github.com/repos/willmcgugan/rich/issues/108/comments","events_url":"https://api.github.com/repos/willmcgugan/rich/issues/108/events","html_url":"https://github.com/willmcgugan/rich/issues/108","id":635900032,"node_id":"MDU6SXNzdWU2MzU5MDAwMzI=","number":108,"title":"rich.syntax: `code_width` parameter seems to be ignored when piping to file","user":{"login":"dannguyen","id":121520,"node_id":"MDQ6VXNlcjEyMTUyMA==","avatar_url":"https://avatars1.githubusercontent.com/u/121520?v=4","gravatar_id":"","url":"https://api.github.com/users/dannguyen","html_url":"https://github.com/dannguyen","followers_url":"https://api.github.com/users/dannguyen/followers","following_url":"https://api.github.com/users/dannguyen/following{/other_user}","gists_url":"https://api.github.com/users/dannguyen/gists{/gist_id}","starred_url":"https://api.github.com/users/dannguyen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dannguyen/subscriptions","organizations_url":"https://api.github.com/users/dannguyen/orgs","repos_url":"https://api.github.com/users/dannguyen/repos","events_url":"https://api.github.com/users/dannguyen/events{/privacy}","received_events_url":"https://api.github.com/users/dannguyen/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-06-10T03:31:47Z","updated_at":"2020-06-11T10:36:41Z","closed_at":"2020-06-11T10:36:41Z","author_association":"NONE","active_lock_reason":null,"body":"> This is for Rich 2.0.0. And I'm running Mac OS 10.14.6\r\n\r\n> note: I may be terribly misusing Rich, and if my use-case is dumb, happy to close this and move on :)\r\n\r\n\r\nI'm using Rich's `Console.print()` as a drop-in replacement for a project's `print()` statement. The project is a command-line tool that collects JSON data from an API. Most of the time, the tool pipes the JSON data into a file; but for the times when I'm just testing out the tool and printing to Terminal, I'd like stdout to show the JSON with Rich's nice syntax coloring.\r\n\r\nHowever, when my tool prints to file, I've noticed unexpected/broken behavior when setting the Syntax() `code_width` parameter. The first part of this issue is me describing the bug. The second part of this issue is a tangential suggestion.\r\n\r\n## Possible bug in console.print/Syntax behavior when stdout is piped to file\r\n\r\n\r\n### Proof of concept\r\n\r\nHere's a dumbed-down proof of concept of my use-case, **without rich**\r\n\r\n```py\r\nimport json\r\ndata = {'hello': 'world'}\r\ntext = json.dumps(data, indent=2)\r\nprint(text)\r\n```\r\n \r\n**With Rich**:\r\n\r\n```py\r\nimport json\r\nfrom rich.console import Console\r\nfrom rich.syntax import Syntax\r\ndata = {'hello': 'world'}\r\ntext = json.dumps(data, indent=2)\r\nsyntax = Syntax(text, lexer_name='json')\r\nconsole = Console()\r\nconsole.print(syntax)\r\n```\r\n\r\n**The problem:** When the JSON text features lines of >80 columns, **and** when I'm printing to file, `console.print()` seems to ignore the `code_width` parameter\r\n\r\n### mybar.py (default code_width)\r\n\r\nThe `mybar.py` script below is an example of a \"wide\" data payload being printed with the `Syntax()` class's default parameters, i.e. `code_width` left to `None` or whatever it normally is:\r\n\r\n```py\r\n# mybar.py\r\nimport json\r\nimport string\r\nfrom rich.console import Console\r\nfrom rich.syntax import Syntax\r\ndata = {\r\n    'id': 1,\r\n    'things': (string.ascii_letters + string.ascii_letters),\r\n}\r\ntext = json.dumps(data, indent=2)\r\nsyntax = Syntax(text, lexer_name='json')\r\nconsole = Console()\r\nconsole.print(syntax)\r\n```\r\n\r\nSo piping `mybar.py` into `bar-output.json`\r\n\r\n```sh\r\n$ python mybar.py  > bar-output.json\r\n```\r\n\r\nResults in `bar-output.json` being improper JSON, because there's a line break at column 80:\r\n\r\n\r\n```json\r\n{                                                                               \r\n  \"id\": 1,                                                                      \r\n  \"things\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmno\r\npqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"                                          \r\n}                                                                                                                                               \r\n```\r\n\r\n### myfoo.py (code_width set to 200)\r\n\r\n`myfoo.py` is the exact same script, just with the `code_width` parameter set to `200`:\r\n\r\n```py\r\n# mybar.py\r\nimport json\r\nimport string\r\nfrom rich.console import Console\r\nfrom rich.syntax import Syntax\r\ndata = {\r\n    'id': 1,\r\n    'things': (string.ascii_letters + string.ascii_letters),\r\n}\r\ntext = json.dumps(data, indent=2)\r\nsyntax = Syntax(text, lexer_name='json')\r\nconsole = Console()\r\nconsole.print(syntax)\r\n```\r\n\r\n```sh\r\n$ python myfoo.py > foo-output.json\r\n```\r\n\r\nThe result, `foo-output.json` just **truncates** all data after column 80 â€“ and that seems like unintended behavior?\r\n\r\n```json\r\n{                                                                               \r\n  \"id\": 1,                                                                      \r\n  \"things\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmno\r\n}                                                                               \r\n```\r\n\r\nNote that when printing to Terminal, the output is fine:\r\n\r\n```sh\r\n$ python myfoo.py \r\n{                                                                                                                                  \r\n  \"id\": 1,                                                                                                                         \r\n  \"things\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"             \r\n}   \r\n```\r\n\r\n## Feature suggestion\r\n\r\nThis feature is tangential to the aforementioned bug: am I right in assuming that `code_width` default value is `None`? And that when printing to Terminal, the `None` value means: \"whatever the terminal's current width is?\". If that's the case, would it be possible for `code_width=None` to have no line width limit whatsoever? \r\n\r\n\r\nThanks!\r\n-Dan \r\n\r\n\r\n","closed_by":{"login":"willmcgugan","id":554369,"node_id":"MDQ6VXNlcjU1NDM2OQ==","avatar_url":"https://avatars3.githubusercontent.com/u/554369?v=4","gravatar_id":"","url":"https://api.github.com/users/willmcgugan","html_url":"https://github.com/willmcgugan","followers_url":"https://api.github.com/users/willmcgugan/followers","following_url":"https://api.github.com/users/willmcgugan/following{/other_user}","gists_url":"https://api.github.com/users/willmcgugan/gists{/gist_id}","starred_url":"https://api.github.com/users/willmcgugan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willmcgugan/subscriptions","organizations_url":"https://api.github.com/users/willmcgugan/orgs","repos_url":"https://api.github.com/users/willmcgugan/repos","events_url":"https://api.github.com/users/willmcgugan/events{/privacy}","received_events_url":"https://api.github.com/users/willmcgugan/received_events","type":"User","site_admin":false},"performed_via_github_app":null}